from models import models
from routers.utils import convert_to_datetime_from_unix
from settings import settings


async def client_info_message(client: models.Client) -> str:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóìÔ∏è"""
    # TODO –æ—Ç–ª–∏—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º sep='_user_.'
    # –Ω–µ—Ç tg username
    if settings.id_salt == client.username[:7]:
        tg_id = client.username[7:]
        username = client.username
    # –µ—Å—Ç—å tg username
    else:
        username, tg_id = client.username.split(settings.username_salt)

    message = f"üë§ –ò–º—è: <a href='tg://user?id={tg_id}'>{username}</a>\n"
    message += "‚úÖ –°—Ç–∞—Ç—É—Å: <b>–≤–∫–ª—é—á–µ–Ω</b>\n" if client.is_active else "‚ùå –°—Ç–∞—Ç—É—Å: <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>\n"
    message += f"üìä –¢—Ä–∞—Ñ–∏–∫: <b>{client.traffic} Gb</b>\n"
    message += f"üóì –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: "

    if client.expire_time != 0:
        expire_date = await convert_to_datetime_from_unix(client.expire_time)
        message += f"<b>{expire_date}</b>"

    else:
        message += "<b>–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ ‚ôæ</b>"

    message += "\n\nüíµ –ö—Ä–∞–π–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ß–ò–°–õ–û –Ω–∞ —Å—É–º–º—É –°–£–ú–ú–ê"

    return message

